plugins {
    id 'java'
    id 'eclipse'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0.1"
    id("com.github.johnrengelman.shadow").version("7.1.2")
}

group = 't.me.p1azmer.velocity.user'
version = '1.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

dependencies {
    compileOnly "com.velocitypowered:velocity-api:3.1.2-SNAPSHOT"
    annotationProcessor "com.velocitypowered:velocity-api:3.1.2-SNAPSHOT"

    implementation("com.j256.ormlite:ormlite-jdbc:6.1")
    implementation group: 'org.yaml', name: 'snakeyaml', version: '2.0'

    compileOnly 'net.luckperms:api:5.4'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
shadowJar {
    getArchiveClassifier().set("")

    exclude("META-INF/licenses/**")
    exclude("META-INF/maven/**")
    exclude("META-INF/versions/**")
    exclude("META-INF/AL2.0")
    exclude("META-INF/INFO_BIN")
    exclude("META-INF/INFO_SRC")
    exclude("META-INF/LGPL2.1")
    exclude("META-INF/LICENSE")
    exclude("META-INF/NOTICE")
    exclude("META-INF/README")
    exclude("META-INF/*.txt")
    exclude("google/protobuf/**")
    exclude("com/google/protobuf/**")
    exclude("com/j256/ormlite/**/*.txt")
    exclude("com/mysql/cj/x/**")
    exclude("com/mysql/cj/xdevapi/**")
    exclude("com/sun/jna/aix-ppc*/**")
    exclude("com/sun/jna/darwin-aarch64/**")
    exclude("com/sun/jna/freebsd-*/**")
    exclude("com/sun/jna/linux-arm*/**")
    exclude("com/sun/jna/linux-mips64el/**")
    exclude("com/sun/jna/linux-ppc*/**")
    exclude("com/sun/jna/linux-riscv64/**")
    exclude("com/sun/jna/linux-s390x/**")
    exclude("com/sun/jna/linux-x86/**")
    exclude("com/sun/jna/openbsd-*/**")
    exclude("com/sun/jna/sunos-*/**")
    exclude("com/sun/jna/win32-x86/**")
    exclude("org/apache/commons/codec/language/**")
    exclude("org/checkerframework/**")
    exclude("**/package-info.class")

    minimize()

    destinationDirectory.set(file("E:/TEST/1st PLAZMER TEST - BUNGEE/plugins/"))
    relocate("org.yaml", "t.me.p1azmer.deps.org.yaml")
}
assemble.dependsOn(shadowJar)